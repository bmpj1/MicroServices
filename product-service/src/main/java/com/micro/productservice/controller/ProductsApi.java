/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.micro.productservice.controller;

import com.micro.productservice.model.ErrorModel;
import com.micro.productservice.model.InlineResponse200Model;
import com.micro.productservice.model.ProductModel;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotNull;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-19T02:13:19.227652+01:00[Europe/Madrid]")
@Validated
@Controller
@Tag(name = "products", description = "Products API structure.")
@RequestMapping("${openapi.product.base-path:/v1}")
public interface ProductsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /products : Create new product.
     *
     * @param productModel  (required)
     * @return Product created. (status code 201)
     *         or Bad Request. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Conflict. (status code 409)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "createProduct",
        summary = "Create new product.",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Product created.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductModel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/products",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ProductModel> createProduct(
        @Parameter(name = "ProductModel", description = "", required = true) @Valid @RequestBody ProductModel productModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"brand\" : \"brand\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /products/{id} : Delete product by Id
     *
     * @param id  (required)
     * @return Product deleted. (status code 200)
     *         or Bad Request. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Not Found. (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "deleteProductById",
        summary = "Delete product by Id",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product deleted.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductModel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductModel> deleteProductById(
        @Min(0L) @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"brand\" : \"brand\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products : Get all products.
     *
     * @param perPage Numbers of items per page. (required)
     * @param page Actual page to display. (required)
     * @return All products fetched. (status code 200)
     *         or Bad Request. (status code 400)
     *         or Not Found. (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getAllProducts",
        summary = "Get all products.",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "All products fetched.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductModel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ProductModel>> getAllProducts(
        @NotNull @Min(5) @Max(50) @Parameter(name = "perPage", description = "Numbers of items per page.", required = true) @Valid @RequestParam(value = "perPage", required = true, defaultValue = "10") Integer perPage,
        @NotNull @Min(0) @Parameter(name = "page", description = "Actual page to display.", required = true) @Valid @RequestParam(value = "page", required = true, defaultValue = "0") Integer page
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"brand\" : \"brand\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /products/{id} : Get product by id.
     *
     * @param id  (required)
     * @return Product fetched. (status code 200)
     *         or Bad Request. (status code 400)
     *         or Not Found. (status code 404)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "getProductById",
        summary = "Get product by id.",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product fetched.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProductModel.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/products/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ProductModel> getProductById(
        @Min(0L) @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"brand\" : \"brand\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /products/{id} : Update a product on the DB.
     *
     * @param id  (required)
     * @param productModel  (required)
     * @return Product updated. (status code 200)
     *         or Bad Request. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Not Found. (status code 404)
     *         or Conflict. (status code 409)
     *         or Unexpected error (status code 200)
     */
    @Operation(
        operationId = "updateProduct",
        summary = "Update a product on the DB.",
        tags = { "products" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Product updated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200Model.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "409", description = "Conflict.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            }),
            @ApiResponse(responseCode = "200", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorModel.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/products/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200Model> updateProduct(
        @Min(0L) @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id,
        @Parameter(name = "ProductModel", description = "", required = true) @Valid @RequestBody ProductModel productModel
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"Product\" : { \"price\" : 6, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"brand\" : \"brand\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
