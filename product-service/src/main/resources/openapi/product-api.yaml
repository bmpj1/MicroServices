---
openapi: 3.0.0
info:
  title: Product API
  version: 1.0.0
servers:
  - url: 'http://localhost:9191/v1'
    description: SwaggerHub API Auto Mocking
tags:
  - name: products
    description: Products API structure.
paths:
  /products:
    get:
      tags:
        - products
      summary: Get all products.
      operationId: getAllProducts
      parameters:
        - name: perPage
          in: query
          description: Numbers of items per page.
          required: true
          style: form
          explode: true
          schema:
            maximum: 50
            minimum: 5
            type: integer
            format: int32
            default: 10
        - name: page
          in: query
          description: Actual page to display.
          required: true
          style: form
          explode: true
          schema:
            minimum: 0
            type: integer
            format: int32
            default: 0
      responses:
        "200":
          description: All products fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOfProducts'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - products
      summary: Create new product.
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        "201":
          description: Product created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /products/{id}:
    get:
      tags:
        - products
      summary: Get product by id.
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            minimum: 0
            type: integer
            format: int64
      responses:
        "200":
          description: Product fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - products
      summary: Delete product by Id
      operationId: deleteProductById
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            minimum: 0
            type: integer
            format: int64
      responses:
        "200":
          description: Product deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - products
      summary: Update a product on the DB.
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          style: simple
          explode: false
          schema:
            minimum: 0
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        "200":
          description: Product updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Not Found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: Conflict.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ListOfProducts:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    Product:
      required:
        - description
        - name
        - price
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: integer
        brand:
          type: string
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        correlationId:
          type: string
    inline_response_200:
      type: object
      properties:
        Product:
          $ref: '#/components/schemas/Product'
  responses:
    BadRequest:
      description: Bad Request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Default:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  parameters:
    Id:
      name: id
      in: path
      required: true
      style: simple
      explode: false
      schema:
        minimum: 0
        type: integer
        format: int64
    PerPage:
      name: perPage
      in: query
      description: Numbers of items per page.
      required: true
      style: form
      explode: true
      schema:
        maximum: 50
        minimum: 5
        type: integer
        format: int32
        default: 10
    Page:
      name: page
      in: query
      description: Actual page to display.
      required: true
      style: form
      explode: true
      schema:
        minimum: 0
        type: integer
        format: int32
        default: 0
